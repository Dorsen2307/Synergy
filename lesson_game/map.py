from utils import randbool
from utils import randcell
from utils import randcell2

# 0 - –ø–æ–ª–µ
# 1 - –¥–µ—Ä–µ–≤–æ
# 2 - —Ä–µ–∫–∞
# 3 - –≥–æ—Å–ø–∏—Ç–∞–ª—å
# 4 - –∞–ø–≥—Ä–µ–π–¥-—à–æ–ø
# 5 - –æ–≥–æ–Ω—å

CELL_TYPES = "üü©ü•¶üü¶üè∞üííüí•"
TREE_BONUS = 100
UPGRADE_COST = 5000
LIFE_COST = 10000

class Map:
    def __init__(self, width, height):
        self.w = width
        self.h = height
        self.cells = [[0 for i in range(width)] for j in range(height)]
        self.generate_forest(5, 10)
        self.generate_rivers(10)
        self.generate_rivers(10)
        self.generate_upgrade_shop()
        self.generate_hospital()

    def check_bounds(self, x, y):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü –ø–æ–ª—è"""
        if x < 0 or y < 0 or x >= self.h or y >= self.w:
            return False
        return True

    def print_map(self, helicopter, clouds):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç—ã"""
        print("üî≥" * (self.w + 2) + " " * 4)
        for ri in range(self.h):
            print("üî≥", end="")
            for ci in range(self.w):
                cell = self.cells[ri][ci]
                if clouds.cells[ri][ci] == 1:
                    print("‚òÅÔ∏è", end="")
                elif clouds.cells[ri][ci] == 2:
                    print("‚õàÔ∏è", end="")
                elif helicopter.x == ri and helicopter.y == ci:
                    print("üöÅ", end="")
                elif 0 <= cell < len(CELL_TYPES):
                    print(CELL_TYPES[cell], end="")
            print("üî≥" + " " * 4)
        print("üî≥" * (self.w + 2) + " " * 4)

    def generate_rivers(self, l):
        """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–µ–∫–∏ (l - –¥–ª–∏–Ω–∞)"""
        rc = randcell(self.w, self.h)
        rx, ry = rc[0], rc[1]
        self.cells[rx][ry] = 2
        while l > 0:
            rc2 = randcell2(rx, ry)
            rx2, ry2 = rc2[0], rc2[1]
            if self.check_bounds(rx2, ry2):
                self.cells[rx2][ry2] = 2
                rx, ry = rx2, ry2
                l -= 1

    def generate_forest(self, r, mxr):
        """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ª–µ—Å–∞ (r - –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, mxr - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Ä–∞–Ω–¥–æ–º–∞)"""
        for ri in range(self.h):
            for ci in range(self.w):
                if randbool(r, mxr):
                    self.cells[ri][ci] = 1

    def generate_tree(self):
        """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–µ—Ä–µ–≤–∞"""
        c = randcell(self.w, self.h)
        cx, cy = c[0], c[1]
        if self.cells[cx][cy] == 0:
            self.cells[cx][cy] = 1

    def generate_upgrade_shop(self):
        """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–æ–º–∏–∫–∞ –∞–ø–≥—Ä–µ–π–¥–∞"""
        c = randcell(self.w, self.h)
        cx, cy = c[0], c[1]
        self.cells[cx][cy] = 4

    def generate_hospital(self):
        """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≥–æ—Å–ø–∏—Ç–∞–ª—è"""
        c = randcell(self.w, self.h)
        cx, cy = c[0], c[1]
        if self.cells[cx][cy] != 4:
            self.cells[cx][cy] = 3
        else:
            self.generate_hospital()

    def add_fire(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–≥–æ–Ω—å –Ω–∞ –¥–µ—Ä–µ–≤–æ"""
        c = randcell(self.w, self.h)
        cx, cy = c[0], c[1]
        if self.cells[cx][cy] == 1:
            self.cells[cx][cy] = 5

    def update_fires(self, helico):
        """–û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—Ç–æ –ø–æ–∂–∞—Ä–∞, –µ—Å–ª–∏ –¥–µ—Ä–µ–≤–æ —Å–≥–æ—Ä–µ–ª–æ, —Ä–∏—Å—É–µ–º –∑–µ–º–ª—é"""
        for ri in range(self.h):
            for ci in range(self.w):
                cell = self.cells[ri][ci]
                if cell == 5:
                    self.cells[ri][ci] = 0
                    if helico.score != 0:
                        helico.score -= TREE_BONUS
        for i in range(5):
            self.add_fire()

    def process_helicopter(self, helico, clouds):
        """–ü—Ä–æ—Ü–µ—Å—Å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –≤–µ—Ä—Ç–æ–ª–µ—Ç–∞ —Å –º–∏—Ä–æ–º"""
        c = self.cells[helico.x][helico.y]
        d = clouds.cells[helico.x][helico.y]
        if c == 2:
            helico.tank = helico.mxtank
        if c == 5 and helico.tank > 0:
            helico.tank -= 1
            helico.score += TREE_BONUS
            self.cells[helico.x][helico.y] = 1
        if c == 4 and helico.score >= UPGRADE_COST:
            helico.mxtank += 1
            helico.score -= UPGRADE_COST
        if c == 3 and helico.score >= LIFE_COST:
            helico.lives += helico.lives // 2
            helico.score -= LIFE_COST
        if d == 2:
            helico.lives -= 1
            if helico.lives == 0:
                helico.game_over()

    def export_data(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã"""
        return {
            "cells": self.cells,
        }

    def import_data(self, data):
        """–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã"""
        self.cells = data["cells"] or [[0 for i in range(self.w)] for j in range(self.h)]